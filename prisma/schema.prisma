// This is an improved version of the Prisma schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
}

model User {
  id        Int       @id @default(autoincrement())
  firstName String
  lastName  String
  email     String    @unique
  username  String    @unique
  password  String
  phone     String
  role      Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  address   Address?
  carts     Cart[]
  orders    Order[]
  files     File[]
}

model Address {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  addressType String
  houseNumber String
  street      String
  district    String
  city        String
  postalCode  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Cart {
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId   Int
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  amount      Int
  amountA3plus Int
  subTotal    Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@id([userId, productId])
  @@unique([userId, productId])
}

model Product {
  id           Int             @id @default(autoincrement())
  name         String
  unitPrice    Float
  cost         Float
  categoryId   Int
  category     ProductCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  size         String
  material     String
  shape        String
  printingSide String
  parcelColor  String
  inkColor     String
  note         String?
  orderLines   OrderLine[]
  carts        Cart[]
  files        File[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model ProductCategory {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model File {
  id          Int      @id @default(autoincrement())
  name        String
  type        String
  size        Int
  url         String
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId   Int
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  isPurchased Boolean
  deletedAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id             String      @id
  userId         Int
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  orderLines     OrderLine[]
  orderSubTotal  Float
  shippingFee    Float
  payment        Payment?
}

model OrderLine {
  orderId      String
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId    Int
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  amount       Int
  amountA3plus Int
  subTotal     Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@id([orderId, productId])
  @@unique([orderId, productId])
}

model Payment {
  orderId       String   @unique
  order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  paymentIntent String
  amount        Float
  currency      String
  status        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}