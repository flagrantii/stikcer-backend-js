// This is an improved version of the Prisma schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(cuid())
  role      String 
  firstName String
  lastName  String
  email     String    @unique
  password  String
  phone     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  address   Address?
  orders    Order[]
  files     File[]
  product Product[]
}

model Address {
  id          String  @id @default(cuid())
  userId      String  @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reciverName String
  phone       String
  address     String
  subDistrict String
  district    String
  province    String
  country     String
  postalCode  String
  taxPayerName String
  taxPayerId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Product {
  categoryId   String
  category     ProductCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  id           String          @id @default(cuid())
  userId       String
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  size         String
  material     String
  shape        String
  printingSide String
  parcelColor  Json
  inkColor     Json
  unitPrice    Float
  amount       Int
  subTotal     Float
  note         String?
  orderLines   OrderLine[]
  file         File?
  isPurchased  Boolean
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model ProductCategory {
  id        String  @id @default(cuid())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model File {
  id          String  @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId   String      @unique
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  categoryId  String
  displayName String
  key         String
  type        String
  size        Int
  isPurchased Boolean
  deletedAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id             String  @id @default(cuid())
  userId         String
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderLines     OrderLine[]
  orderSubTotal  Float
  shippingFee    Float
  shippingMethod String
  paymentId      String
  payment        Payment?
  status         String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model OrderLine {
  orderId      String
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId    String
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@id([orderId, productId])
  @@unique([orderId, productId])
}

model Payment {
  orderId       String  @unique
  order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  paymentIntent String
  amount        Float
  currency      String
  status        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}